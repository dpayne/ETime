package com.etrade.etime;

import android.os.AsyncTask;
import android.util.Log;
import android.widget.ProgressBar;
import org.apache.http.impl.client.DefaultHttpClient;

import java.util.Calendar;
import java.util.LinkedList;
import java.util.List;

/**
 * User: dpayne2
 * Date: 1/5/12
 * Time: 12:02 PM
 */
public class TimeCardAsyncTask extends AsyncTask<Void, Integer, Boolean> {

    private ProgressBar progressBar;
    private ETimeActivity activity;
    private DefaultHttpClient httpClient;
    private String DAILY_TOTAL_STR = "DailyTotal";
    private String TIMECARD_URL = "https://eet.adp.com/wfc/applications/mss/esstimecard.do";
    private boolean status = false;
    private static final String DIV = "<div>";
    private static final String DIV_CLOSE = "</div>";
    private static final String TABLE_ROW_TAG = "<tr class";
    private static final String PUNCH_TAG = "Punch\">";
    private static final String PUNCH_IN = "InPunch";
    private static final String PUNCH_END = "<div class=\"\" title=\"\">";
    private static final String PUNCH_OUT = "OutPunch";
    private static final String TOTAL_STR = "Total:";
    private static final String HTML_SPACE = "&nbsp;";

    private static final String TAG = "TimeCard-4321";

    int myProgress;

    private static final String[] daysOfWeek = {"Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"};
    private static final String TABLE_ROW_END_TAG = "</tr>";
    private List<Punch> punches;
    private double totalHrs;

    @Override
    protected void onPostExecute(Boolean result) {
        //todo remove test punch
//
//        Punch punch = new Punch();
//        punch.setCalendar(Calendar.getInstance());
//        punch.getCalendar().set(Calendar.DAY_OF_MONTH, 7);
//        punch.getCalendar().set(Calendar.HOUR_OF_DAY, 10);
//        punch.getCalendar().set(Calendar.MINUTE,12);
//        punch.setClockIn(true);
//        punches.add(punch);
//        for (Punch punch : punches)
//            Log.v(TAG, punch.toString());
        activity.setPunches(punches);
        activity.setTotalHrs(totalHrs);
        activity.onPostParsingTimeCard();
    }

    @Override
    protected void onPreExecute() {
        myProgress = 0;
    }

    @Override
    protected Boolean doInBackground(Void... params) {
        String page =  ETimeUtils.getHtmlPage(httpClient, TIMECARD_URL);
        totalHrs = getTotalsHrs(page);
        punches = getTodaysPunches(page);
        status = !punches.isEmpty();
        myProgress = 100;
        publishProgress(myProgress);
        return status;
    }
    
    private double getTotalsHrs(String page) {
        double total = 0;
        
        try {
            int startOfTotal = page.indexOf(TOTAL_STR);

            int endOfTotal = page.indexOf(DIV_CLOSE, startOfTotal);
            String withHtmlSpaces = page.substring(startOfTotal + TOTAL_STR.length(), endOfTotal);
            String withoutHtmlSpaces = withHtmlSpaces.replaceAll(HTML_SPACE, "");

            total = Double.parseDouble(withoutHtmlSpaces);
        } catch (Exception e) {
            Log.w(TAG, e.toString());
        }

        return total;
    }

    private int findNextTodaysRow(String page, int startIndex) {
        Calendar calendar = Calendar.getInstance();
        int month = calendar.get(Calendar.MONTH) + 1;
        int day = calendar.get(Calendar.DAY_OF_MONTH);
        String dayOfWeek = daysOfWeek[calendar.get(Calendar.DAY_OF_WEEK) - 1];

        String date;
        if (day < 10) {
            date = ">" + dayOfWeek + " " + Integer.toString(month) + "/0" + Integer.toString(day);
        } else {
            date = ">" + dayOfWeek + " " + Integer.toString(month) + "/" + Integer.toString(day);
        }

        int indexOfDate = page.indexOf(date, startIndex);

        if (indexOfDate < 0) {
            return -1;
        }

        return page.lastIndexOf(TABLE_ROW_TAG, indexOfDate);
    }
    
    private List<Punch> getTodaysPunches(String page) {

        int indexOfCurRow;
        int indexOfEndOfCurRow;
        String curRow;
        int index = 0;
        List<Punch> punchesList = new LinkedList<Punch>();
        try {
        do {

            indexOfCurRow = findNextTodaysRow(page, index);
            if (indexOfCurRow < 0)
                break;

            indexOfEndOfCurRow = page.indexOf(TABLE_ROW_END_TAG, indexOfCurRow);
            if (indexOfEndOfCurRow < 0)
                break;

            curRow = page.substring(indexOfCurRow, indexOfEndOfCurRow);
            punchesList.addAll(getPunchesFromRow(curRow));

            index = indexOfEndOfCurRow + TABLE_ROW_END_TAG.length();

        } while (indexOfCurRow >= 0);

        } catch (Exception e) {
            Log.w(TAG, e);
        }
        return punchesList;

    }
    
    private List<Punch> getPunchesFromRow(String row) {
        List<Punch> punchesList = new LinkedList<Punch>();

        Punch punch = null;
        int index = 0;
        do {
            row = row.substring(index);
            punch = new Punch();
            index = getNextPunch(row, index, punch);
            if (index >=0)
                punchesList.add(punch);
        } while(index > 0);
        return punchesList;
    }

    private int getNextPunch(String page, int startIndex, Punch punch) {
        try {
            int indexOfPunch = page.indexOf(PUNCH_TAG, startIndex);
            int indexOfStartOfDiv = page.indexOf(PUNCH_END, indexOfPunch + PUNCH_TAG.length() + 1);
            int endOfPunch = page.indexOf(DIV_CLOSE, indexOfStartOfDiv);

            if (page.substring(0, indexOfStartOfDiv).contains(PUNCH_IN)) {
                punch.setClockIn(true);
            } else {
                punch.setClockIn(false);
            }

            String strDate = page.substring(indexOfStartOfDiv + PUNCH_END.length(), endOfPunch);
            strDate = strDate.trim();

            int hour = Integer.parseInt(strDate.substring(0, strDate.indexOf(':')));
            boolean am;
            int min;

            if (strDate.contains("P")) {
                am = false;
                min = Integer.parseInt(strDate.substring(strDate.indexOf(':') + 1, strDate.indexOf('P')));
            } else if (strDate.contains("A")) {
                am = true;
                min = Integer.parseInt(strDate.substring(strDate.indexOf(':') + 1, strDate.indexOf('A')));
            } else {
                return -1;
            }

            Calendar calendar = Calendar.getInstance();
            int hour24;
            if (am) {
                calendar.set(Calendar.AM_PM, Calendar.AM);
                calendar.set(Calendar.HOUR, hour);
                if (hour == 12) {
                    hour24 = 0;
                } else {
                    hour24 = hour;
                }
            } else {
                calendar.set(Calendar.AM_PM, Calendar.PM);
                calendar.set(Calendar.HOUR, hour);
                
                if (hour != 12) {
                    hour24 = hour + 12;
                } else {
                    hour24 = hour;
                }
            }
            
            calendar.set(Calendar.HOUR_OF_DAY, hour24);
            calendar.set(Calendar.MINUTE, min);
            calendar.set(Calendar.SECOND, 0);
            punch.setCalendar(calendar);

            return endOfPunch + PUNCH_END.length();
        } catch (Exception e) {
            Log.w(TAG, e.toString());
            return -1;
        }
    }

    private double findLastDailyTotal(String page) {
        int indexOfLastDailyTotal = findIndexOfLastDailyTotal(page);
        int endOfLastDailyTotal = page.indexOf(DIV_CLOSE, indexOfLastDailyTotal);

        return Double.parseDouble(page.substring(indexOfLastDailyTotal, endOfLastDailyTotal));
    }

    private int findIndexOfLastDailyTotal(String page) {
        int indexOfPrevDailyTotal = 0;
        int curIndexOfDailyTotal = 0;
        int indexOfNextDiv = 0;
        int indexOfNextDivClose;

        double dailyTotal = 0;
        String dailyTotalStr = null;

        do {
            curIndexOfDailyTotal = page.indexOf(DAILY_TOTAL_STR, curIndexOfDailyTotal + 1);
            if (curIndexOfDailyTotal < 0)
                break;

            indexOfNextDiv = page.indexOf(DIV, curIndexOfDailyTotal);
            indexOfNextDivClose = page.indexOf(DIV_CLOSE, indexOfNextDiv);

            dailyTotalStr = page.substring(indexOfNextDiv + DIV.length(), indexOfNextDivClose);
            if (dailyTotalStr.equals(HTML_SPACE)) //space in html
            {
                continue;
            }

            try {
                dailyTotal = Double.parseDouble(dailyTotalStr);
                indexOfPrevDailyTotal = indexOfNextDiv + DIV.length();
            } catch (Exception e) {
                Log.e(TAG, "Error in findLastIndexOfDailyTotal while parsing double");
            }

            //check if div is empty
        } while (curIndexOfDailyTotal >= 0);

        return indexOfPrevDailyTotal;
    }

    @Override
    protected void onProgressUpdate(Integer... values) {
        progressBar.setProgress(values[0]);
    }

    public void setProgressBar(ProgressBar progressBar) {
        this.progressBar = progressBar;
    }

    public void setActivity(ETimeActivity activity) {
        this.activity = activity;
    }

    public void setHttpClient(DefaultHttpClient httpClient) {
        this.httpClient = httpClient;
    }
}