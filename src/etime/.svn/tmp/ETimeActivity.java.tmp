package com.etrade.etime;

import android.app.Activity;
import android.content.Intent;
import android.content.SharedPreferences;
import android.os.Bundle;
import android.os.CountDownTimer;
import android.preference.PreferenceManager;
import android.util.Log;
import android.view.Menu;
import android.view.MenuInflater;
import android.view.MenuItem;
import android.view.View;
import android.webkit.*;
import android.widget.Button;
import android.widget.ProgressBar;
import android.widget.TextView;
import android.widget.Toast;
import org.apache.http.auth.AuthScope;
import org.apache.http.auth.UsernamePasswordCredentials;
import org.apache.http.impl.client.DefaultHttpClient;

import java.util.Calendar;
import java.util.List;

public class ETimeActivity extends Activity {

    private String PREFS_USERNAME = "username";
    private String PREFS_PASSWORD = "password";

    TextView timer;
    WebView webview;
    DefaultHttpClient httpClient = new DefaultHttpClient();
    final Activity activity = this;

    private String loginName = null;
    private String password = null;

    private String TAG = "ETime-4321";
    private String PREF_LUNCH = "lunch";
    private String PREF_TIMELEFT = "timeLeft";
    private String PREF_CLOCKEDIN = "clockedIn";
    private String PREF_CLOCKEDINTIME = "clockedInTime";
    private String PREF_LOGINTIME = "loginTime";
    private String PREF_TIMEOUT = "timeOut";

    private String TIMESTAMP_RECORD_URL;
    private String TIMECARD_URL;

    private String LOGIN_URL;
    private String TIMESTAMP_URL;
    private String TIMESTAMP_SUCCESS;
    private String LOGIN_FAILED_URL;

    private static final int ALARM = 3600000 * 8; //eight hours
    private MyCount count = null;

    private long loginTime = 0;
    final private long DEF_TIMEOUT = 900000; // 15 mins in milliseconds

    private ProgressBar progressBar;
    private Button recordTime;
    private Button timeCard;
    
    private List<Punch> punches;
    private double totalHrs;

    /**
     * Called when the activity is first created.
     */
    @Override
    public void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        SharedPreferences pref = getSharedPreferences(PREFS_USERNAME, MODE_PRIVATE);
    	pref.edit().putLong(PREF_LOGINTIME, 0).commit();
    }

    @Override
    public void onResume() {
        super.onResume();

        if (validConfig()) {
            setupTitlePage();
        } else { /* show config page, to set username password */
            Toast.makeText(getApplicationContext(), "Username/Password required", Toast.LENGTH_LONG).show();
            startPreferencesPage();
        }
    }
    
    @Override
    public void onDestroy() {
    	super.onDestroy();
    	SharedPreferences pref = getSharedPreferences(PREFS_USERNAME, MODE_PRIVATE);
    	pref.edit().putLong(PREF_LOGINTIME, 0).commit();
    }

    protected void startPreferencesPage() {
        startActivity(new Intent(activity, ETimePreferences.class));
    }

    private WebView setupWebView(WebView webview) {

        webview.getSettings().setJavaScriptEnabled(true);
        webview.getSettings().setJavaScriptCanOpenWindowsAutomatically(true);
        webview.getSettings().setAllowFileAccess(true);
        webview.getSettings().setBuiltInZoomControls(true);
        webview.getSettings().setSupportZoom(true);
        webview.canGoBack();

        webview.setWebViewClient(new MyWebViewClient());
        webview.setWebChromeClient(new MyWebChromeClient());

        return webview;
    }

    public void setPunches(List<Punch> punches) {
        this.punches = punches;
    }

    public void setTotalHrs(double totalHrs) {
        this.totalHrs = totalHrs;
    }

    private class MyWebChromeClient extends WebChromeClient {
        public void onProgressChanged(WebView view, int progress) {
            progressBar.setProgress(progress);
        }
    }

    private void setupGlobals() {
        timer = (TextView) findViewById(R.id.tv_timer);
        TIMESTAMP_RECORD_URL = getString(R.string.timestamp_record_url);
        TIMECARD_URL = getString(R.string.timecard_url);

        LOGIN_URL = getString(R.string.login_url);
        TIMESTAMP_URL = getString(R.string.timestamp_url);
        TIMESTAMP_SUCCESS = getString(R.string.timestamp_success_url);
        LOGIN_FAILED_URL = getString(R.string.login_failed_url);

        webview = setupWebView((WebView) findViewById(R.id.web_engine));
        progressBar = (ProgressBar) findViewById(R.id.pb_progressBar);
        recordTime = (Button) findViewById(R.id.btn_recordTime);
        timeCard = (Button) findViewById(R.id.btn_timeCard);

    }

    private void setupTitlePage() {
        setContentView(R.layout.title_page);

        setupGlobals();

        SharedPreferences pref = getSharedPreferences(PREFS_USERNAME, MODE_PRIVATE);
        Boolean lunch = pref.getBoolean(PREF_LUNCH, false);
        Boolean clockedIn = pref.getBoolean(PREF_CLOCKEDIN, false);
        if (clockedIn || lunch)
            displayTimer();
        
        showTopMess(loginName);

        CookieManager cookieManager = getSyncedCookieManager();
        login(cookieManager);

        setupButtons();
    }

    private CookieManager getSyncedCookieManager() {
        CookieSyncManager cookieSyncManager = CookieSyncManager.createInstance(webview.getContext());
        CookieManager cookieManager = CookieManager.getInstance();
        cookieManager.setAcceptCookie(true);
        cookieManager.removeSessionCookie();
        cookieSyncManager.sync();
        return cookieManager;
    }


    private void login(CookieManager cookieManager) {
    	SharedPreferences pref = getSharedPreferences(PREFS_USERNAME, MODE_PRIVATE);
    	long loginTime = pref.getLong(PREF_LOGINTIME, 0);
    	long timeout = pref.getLong(PREF_TIMEOUT, DEF_TIMEOUT);
        long curTime = Calendar.getInstance().getTimeInMillis();
        if ((curTime - loginTime) > timeout || oldLoginNameBeforePreferencePage != loginName) {
            if(oldLoginNameBeforePreferencePage != loginName)
            {	
//            	loadUrl("https://eet.adp.com/wfc/applications/kss/html/CustomLogoff.jsp");
//            	cookieManager.removeSessionCookie();
//            	cookieManager.removeAllCookie();
//            	cookieManager.setCookie("https://eet.adp.com/", "");
//            	cookieManager = getSyncedCookieManager();
            }
            	
        	LoginAsyncTask loginAsyncTask = new LoginAsyncTask();
	        progressBar.setProgress(0);
	
	        httpClient.getCredentialsProvider().setCredentials(new AuthScope(null, -1),
	                new UsernamePasswordCredentials(loginName, password));
	        loginAsyncTask.setProgressBar(progressBar);
	        loginAsyncTask.setActivity(this);
	        loginAsyncTask.setCookieManager(cookieManager);
	        loginAsyncTask.setHttpClient(httpClient);
	        loginAsyncTask.setContext(getApplicationContext());
	        loginAsyncTask.execute();
        } else {
        	Log.v(TAG, "curTime: "+curTime);
        	Log.v(TAG, "loginTime: "+loginTime);
        	Log.v(TAG, "timeout: "+timeout);
        	Log.v(TAG, "oldLoginNameBeforePreferencePage: "+oldLoginNameBeforePreferencePage);
        	Log.v(TAG, "loginName: "+loginName);
            hideProgressBar();
            showTitlePageBtns();
            return;
        }
        
    }

    private void setupButtons() {
        recordTime.setOnClickListener(new View.OnClickListener() {
            public void onClick(View v) {
                hideTitlePageBtns();
                showProgressBar();

                webview.loadUrl(TIMESTAMP_RECORD_URL);
            }
        });

        timeCard.setOnClickListener(new View.OnClickListener() {
            public void onClick(View v) {
                showProgressBar();
                hideTitlePageBtns();
                TimeCardAsyncTask timeCardAsyncTask = new TimeCardAsyncTask();
                timeCardAsyncTask.setActivity((ETimeActivity) activity);
                timeCardAsyncTask.setHttpClient(httpClient);
                timeCardAsyncTask.setProgressBar(progressBar);
                timeCardAsyncTask.execute();
                webview.loadUrl(TIMECARD_URL);
            }
        });
    }
    
    private void showTopMess(String mess) {
    	TextView topMess = (TextView) findViewById(R.id.tv_topMess);
    	topMess.setText(mess);
    	topMess.setVisibility(View.VISIBLE);
    }
    
    private void hideTopMess() {
    	TextView topMess = (TextView) findViewById(R.id.tv_topMess);    	
    	topMess.setVisibility(View.GONE);
    }

   protected void hideTitlePageBtns() {
        recordTime.setVisibility(View.GONE);
        timeCard.setVisibility(View.GONE);
    }

    protected void showTitlePageBtns() {
        recordTime.setVisibility(View.VISIBLE);
        timeCard.setVisibility(View.VISIBLE);
    }

    protected void hideProgressBar() {
        TextView loading = (TextView) findViewById(R.id.tv_load);

        progressBar.setVisibility(View.GONE);
        loading.setVisibility(View.GONE);
    }

    protected void showProgressBar() {
        TextView loading = (TextView) findViewById(R.id.tv_load);

        progressBar.setVisibility(View.VISIBLE);
        loading.setVisibility(View.VISIBLE);
    }

    private boolean validConfig() {
        SharedPreferences pref = PreferenceManager.getDefaultSharedPreferences(activity);
        loginName = pref.getString(PREFS_USERNAME, null);
        password = pref.getString(PREFS_PASSWORD, null);

        return (loginName != null && !loginName.equals("")) && (password != null && !password.equals(""));
    }

    private class MyWebViewClient extends WebViewClient {
        @Override
        public void onReceivedHttpAuthRequest(WebView view,
                                              HttpAuthHandler handler, String host, String realm) {
            handler.proceed(loginName, password);
        }

        @Override
        public boolean shouldOverrideUrlLoading(WebView view, String url) {
            view.loadUrl(url);
            return true;
        }

        @Override
        public void onPageFinished(WebView view, String url) {
            Log.v(TAG, url);
            if (url.equals(TIMESTAMP_URL)) {
                hideProgressBar();

                showTitlePageBtns();
                showTopMess(loginName);
            } else if (url.equals(TIMESTAMP_SUCCESS)) {
                hideProgressBar();

                setTimer();
                showTitlePageBtns();
                Toast.makeText(getApplicationContext(), "Time Stamp Successful", Toast.LENGTH_LONG).show();
            } else if (url.equals(TIMECARD_URL)) {
                hideProgressBar();

                webview.setVisibility(View.VISIBLE);

            } else if (url.equals(LOGIN_FAILED_URL)) {
                hideProgressBar();

                Toast.makeText(getApplicationContext(), "Invalid Username/Password", Toast.LENGTH_LONG).show();
                startPreferencesPage();
            }
        }
        
        @Override
        public void onReceivedError(WebView view, int errorCode, String description, String failingUrl) {
        	hideProgressBar();
        	
            Toast.makeText(getApplicationContext(), "Unable to connect to service", Toast.LENGTH_LONG).show();
        }
    }

    public class MyCount extends CountDownTimer {
        public MyCount(long millisInFuture, long countDownInterval) {
            super(millisInFuture, countDownInterval);
        }

        @Override
        public void onFinish() {
            timer.setText("00:00:00");
            Toast.makeText(getApplicationContext(), "Done with 8 hours. Time to clock out!", Toast.LENGTH_LONG).show();
        }

        @Override
        public void onTick(long millisUntilFinished) {
            long hrs = millisUntilFinished / 1000 / 60 / 60;
            long mins = (millisUntilFinished - hrs * 1000 * 60 * 60) / 1000 / 60;
            long secs = (millisUntilFinished - hrs * 1000 * 60 * 60 - mins * 1000 * 60) / 1000;
            timer.setText(hrs + ":" + mins + ":" + secs);
        }

    }

    private void setTimer() {
        SharedPreferences pref = getSharedPreferences(PREFS_USERNAME, MODE_PRIVATE);
        Boolean lunch = pref.getBoolean(PREF_LUNCH, false);
        Boolean clockedIn = pref.getBoolean(PREF_CLOCKEDIN, false);

        if (clockedIn) {
            int clockedInTime = pref.getInt(PREF_CLOCKEDINTIME, 0);
            if (lunch) {
                pref.edit().putInt(PREF_TIMELEFT, ALARM).commit();
                pref.edit().putBoolean(PREF_LUNCH, false).commit();
                Toast.makeText(getApplicationContext(), "Clocked Out", Toast.LENGTH_LONG).show();
            } else {
                pref.edit().putInt(PREF_TIMELEFT, (int) (ALARM - (System.currentTimeMillis() - clockedInTime))).commit();
                pref.edit().putBoolean(PREF_LUNCH, true).commit();
                Toast.makeText(getApplicationContext(), "Clocked Out For Lunch", Toast.LENGTH_LONG).show();
            }
            pref.edit().putBoolean(PREF_CLOCKEDIN, false).commit();
            if (count != null)
                count.cancel();
        } else {
            int counter = 0;
            if (lunch) {
                counter = pref.getInt(PREF_TIMELEFT, ALARM);
                Toast.makeText(getApplicationContext(), "Clocked In For Lunch", Toast.LENGTH_LONG).show();
            } else {
                counter = ALARM;
                Toast.makeText(getApplicationContext(), "Clocked In", Toast.LENGTH_LONG).show();
            }
            pref.edit().putInt(PREF_CLOCKEDINTIME, (int) System.currentTimeMillis()).commit();
            count = new MyCount(counter, 1000);
            count.start();
            pref.edit().putBoolean(PREF_CLOCKEDIN, true).commit();
        }

        timer.setVisibility(View.VISIBLE);
    }

    private void displayTimer() {
        SharedPreferences pref = getSharedPreferences(PREFS_USERNAME, MODE_PRIVATE);
        Boolean lunch = pref.getBoolean(PREF_LUNCH, false);
        Boolean clockedIn = pref.getBoolean(PREF_CLOCKEDIN, false);
        int clockedInTime = pref.getInt(PREF_CLOCKEDINTIME, 0);
        int timeLeft = 0;

        if (clockedIn && !lunch)
            timeLeft = (int) (ALARM - (System.currentTimeMillis() - clockedInTime));
        if (lunch && !clockedIn)
            timeLeft = pref.getInt(PREF_TIMELEFT, ALARM);
        if (clockedIn && lunch)
            timeLeft = (int) (pref.getInt(PREF_TIMELEFT, ALARM) - (System.currentTimeMillis() - clockedInTime));

        count = new MyCount(timeLeft, 1000);
        count.start();

        timer.setVisibility(View.VISIBLE);

        if (!clockedIn)
            count.cancel();
    }

    @Override
    public boolean onCreateOptionsMenu(Menu menu) {
        MenuInflater inflater = getMenuInflater();
        inflater.inflate(R.menu.menu, menu);
        return true;
    }

    @Override
    public boolean onOptionsItemSelected(MenuItem item) {
        switch (item.getItemId()) {
            case R.id.menu_preferences:
                startPreferencesPage();
                break;
        }
        return true;
    }
    
    protected void loadUrl(String url) {
        hideTitlePageBtns();
        showProgressBar();
        webview.loadUrl(url);
    }
}
